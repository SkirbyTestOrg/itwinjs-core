/*---------------------------------------------------------------------------------------------
|  $Copyright: (c) 2018 Bentley Systems, Incorporated. All rights reserved. $
 *--------------------------------------------------------------------------------------------*/
import * as chai from "chai";
import * as utils from "./TestUtils";

import { TestConfig } from "../TestConfig";

import { Guid } from "@bentley/bentleyjs-core";
import { EventSubscription, CodeEvent, EventSAS, EventType } from "../../imodelhub";
import { IModelHubClient } from "../../imodelhub/Client";
import { AccessToken } from "../../Token";
import { ResponseBuilder, RequestType, ScopeType } from "../ResponseBuilder";

chai.should();

function mockCreateEventSubscription(imodelId: string, eventTypes: EventType[]) {
  if (!TestConfig.enableMocks)
    return;

  const requestPath = utils.createRequestUrl(ScopeType.iModel, imodelId, "EventSubscription");
  const requestResponse = ResponseBuilder.generatePostResponse<EventSubscription>(ResponseBuilder.generateObject<EventSubscription>(EventSubscription,
    new Map<string, any>([
      ["wsgId", Guid.createValue()],
      ["eventTypes", eventTypes],
    ])));
  const postBody = ResponseBuilder.generatePostBody<EventSubscription>(ResponseBuilder.generateObject<EventSubscription>(EventSubscription,
    new Map<string, any>([
      ["eventTypes", eventTypes],
    ])));
  ResponseBuilder.mockResponse(utils.defaultUrl, RequestType.Post, requestPath, requestResponse, 1, postBody);
}

function mockGetEventSASToken(imodelId: string) {
  if (!TestConfig.enableMocks)
    return;

  const requestPath = utils.createRequestUrl(ScopeType.iModel, imodelId, "EventSAS");
  const responseObject = ResponseBuilder.generateObject<EventSAS>(EventSAS,
    new Map<string, any>([
      ["sasToken", Guid.createValue()],
      ["baseAddres", `https://qa-imodelhubapi.bentley.com/v2.5/Repositories/iModel--${imodelId}/iModelScope`],
    ]));
  const requestResponse = ResponseBuilder.generatePostResponse<EventSAS>(responseObject);
  const postBody = ResponseBuilder.generatePostBody<EventSAS>(ResponseBuilder.generateObject<EventSAS>(EventSAS));
  ResponseBuilder.mockResponse(utils.defaultUrl, RequestType.Post, requestPath, requestResponse, 1, postBody);
}

function mockGetEvent(imodelId: string, subscriptionId: string, eventBody: object) {
  if (!TestConfig.enableMocks)
    return;

  const requestPath = utils.createRequestUrl(ScopeType.iModel, imodelId, "Subscriptions", subscriptionId + "/messages/head");
  ResponseBuilder.mockResponse(utils.defaultUrl, RequestType.Delete, requestPath, eventBody, 1, {}, { "content-type": "CodeEvent" });
}

function mockDeleteEventSubscription(imodelId: string, subscriptionId: string) {
  if (!TestConfig.enableMocks)
    return;

  const requestPath = utils.createRequestUrl(ScopeType.iModel, imodelId, "EventSubscription", subscriptionId);
  ResponseBuilder.mockResponse(utils.defaultUrl, RequestType.Delete, requestPath);
}

describe("iModelHub EventHandler", () => {
  let accessToken: AccessToken;
  let iModelId: string;
  let subscription: EventSubscription;
  let briefcaseId: number;
  const imodelName = "imodeljs-clients Events test";
  const imodelHubClient: IModelHubClient = utils.getDefaultClient();

  before(async () => {
    accessToken = await utils.login();
    await utils.createIModel(accessToken, imodelName);
    iModelId = await utils.getIModelId(accessToken, imodelName);
    briefcaseId = (await utils.getBriefcases(accessToken, iModelId, 1))[0].briefcaseId!;
  });

  afterEach(() => {
    ResponseBuilder.clearMocks();
  });

  it("should subscribe to event subscription", async () => {
    const eventTypes: EventType[] = ["CodeEvent"];
    mockCreateEventSubscription(iModelId, eventTypes);

    subscription = await imodelHubClient.Events().Subscriptions().create(accessToken, iModelId, eventTypes);
    chai.expect(subscription);
  });

  it("should receive code event", async () => {
    // This test attempts to receive at least one code event generated by the test above
    mockGetEventSASToken(iModelId);
    const sas = await imodelHubClient.Events().getSASToken(accessToken, iModelId);

    if (!TestConfig.enableMocks) {
      await imodelHubClient.Codes().update(accessToken, iModelId, [utils.randomCode(briefcaseId)]);
    }

    const requestResponse = '{"EventTopic":"123","FromEventSubscriptionId":"456","ToEventSubscriptionId":"","BriefcaseId":1,"CodeScope":"0X100000000FF","CodeSpecId":"0xff","State":1,"Values":["TestCode143678383"]}';
    mockGetEvent(iModelId, subscription.wsgId, JSON.parse(requestResponse));
    const event = await imodelHubClient.Events().getEvent(sas.sasToken!, sas.baseAddres!, subscription.wsgId);

    mockDeleteEventSubscription(iModelId, subscription.wsgId);
    await imodelHubClient.Events().Subscriptions().delete(accessToken, iModelId, subscription.wsgId);
    chai.expect(event).instanceof(CodeEvent);
  });
});
