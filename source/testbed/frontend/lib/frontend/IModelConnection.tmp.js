"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
|  $Copyright: (c) 2017 Bentley Systems, Incorporated. All rights reserved. $
 *--------------------------------------------------------------------------------------------*/
const chai_1 = require("chai");
const Id_1 = require("@bentley/bentleyjs-core/lib/Id");
const Code_1 = require("../../../../frontend/lib/common/Code");
const IModelConnection_1 = require("../../../../frontend/lib/frontend/IModelConnection");
const TestData_1 = require("./TestData");
describe("IModelConnection", () => {
    let accessToken;
    let testProjectId;
    let testIModelId;
    before(async () => {
        accessToken = await TestData_1.TestData.getTestUserAccessToken();
        testProjectId = await TestData_1.TestData.getTestProjectId(accessToken, "NodeJsTestProject");
        testIModelId = await TestData_1.TestData.getTestIModelId(accessToken, testProjectId, "MyTestModel");
    });
    it("should be able to get elements and models from an IModelConnection", async () => {
        const iModel = await IModelConnection_1.IModelConnection.open(accessToken, testIModelId);
        chai_1.assert.exists(iModel);
        chai_1.assert.isTrue(iModel instanceof IModelConnection_1.IModelConnection);
        chai_1.assert.exists(iModel.models);
        chai_1.assert.isTrue(iModel.models instanceof IModelConnection_1.IModelConnectionModels);
        chai_1.assert.exists(iModel.elements);
        chai_1.assert.isTrue(iModel.elements instanceof IModelConnection_1.IModelConnectionElements);
        const elementIds = [iModel.elements.rootSubjectId];
        const elementProps = await iModel.elements.getElementProps(elementIds);
        chai_1.assert.equal(elementProps.length, elementIds.length);
        chai_1.assert.isTrue(iModel.elements.rootSubjectId.equals(new Id_1.Id64(elementProps[0].id)));
        chai_1.assert.isTrue(iModel.models.repositoryModelId.equals(new Id_1.Id64(elementProps[0].model)));
        const queryElementIds = await iModel.elements.queryElementIds({ from: "BisCore.Category", limit: 20, offset: 0 });
        chai_1.assert.isAtLeast(queryElementIds.length, 1);
        chai_1.assert.isTrue(queryElementIds[0] instanceof Id_1.Id64);
        const formatObjs = await iModel.elements.formatElements(queryElementIds);
        chai_1.assert.isAtLeast(formatObjs.length, 1);
        const modelIds = [iModel.models.repositoryModelId];
        const modelProps = await iModel.models.getModelProps(modelIds);
        chai_1.assert.exists(modelProps);
        chai_1.assert.equal(modelProps.length, modelIds.length);
        chai_1.assert.isTrue(iModel.models.repositoryModelId.equals(new Id_1.Id64(modelProps[0].id)));
        const rows = await iModel.executeQuery("SELECT CodeValue AS code FROM BisCore.Category");
        chai_1.assert.isAtLeast(rows.length, 1);
        chai_1.assert.exists(rows[0].code);
        chai_1.assert.equal(rows.length, queryElementIds.length);
        const codeSpecByName = await iModel.codeSpecs.getCodeSpecByName(Code_1.CodeSpecNames.SpatialCategory());
        chai_1.assert.exists(codeSpecByName);
        const codeSpecById = await iModel.codeSpecs.getCodeSpecById(codeSpecByName.id);
        chai_1.assert.exists(codeSpecById);
        await iModel.close(accessToken);
    });
});
//# sourceMappingURL=data:application/json;base64,