"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
|  $Copyright: (c) 2017 Bentley Systems, Incorporated. All rights reserved. $
 *--------------------------------------------------------------------------------------------*/
const express = require("express");
const bodyParser = require("body-parser");
const IModelDb_1 = require("../../../backend/lib/backend/IModelDb");
const IModelGateway_1 = require("../../../backend/lib/gateway/IModelGateway");
const BentleyCloudGatewayConfiguration_1 = require("../../../backend/lib/gateway/BentleyCloudGatewayConfiguration");
const NodeAddonRegistry_1 = require("../../../backend/lib/backend/NodeAddonRegistry");
const testbedConfig = require("../config");
IModelDb_1.IModelDb; // Signal usage of IModelDb to tsc import logic
const gatewaysConfig = BentleyCloudGatewayConfiguration_1.BentleyCloudGatewayConfiguration.initialize(testbedConfig.gatewayParams, [IModelGateway_1.IModelGateway]);
// tslint:disable-next-line:no-var-requires
const addon = require(NodeAddonRegistry_1.NodeAddonPackageName.computeDefaultImodelNodeAddonName());
NodeAddonRegistry_1.NodeAddonRegistry.registerAddon(addon);
const app = express();
app.use(bodyParser.text());
app.get(testbedConfig.swaggerURI, (req, res) => gatewaysConfig.protocol.handleOpenApiDescriptionRequest(req, res));
app.post("*", async (req, res) => gatewaysConfig.protocol.handleOperationPostRequest(req, res));
app.listen(testbedConfig.serverPort);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9iYWNrZW5kL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O2dHQUVnRztBQUNoRyxtQ0FBbUM7QUFDbkMsMENBQTBDO0FBQzFDLDhEQUEyRDtBQUMzRCx3RUFBcUU7QUFDckUsOEdBQTJHO0FBQzNHLGdGQUFtRztBQUNuRywyQ0FBMkM7QUFFM0MsbUJBQVEsQ0FBQyxDQUFDLCtDQUErQztBQUN6RCxNQUFNLGNBQWMsR0FBRyxtRUFBZ0MsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxDQUFDLDZCQUFhLENBQUMsQ0FBQyxDQUFDO0FBRWpILDJDQUEyQztBQUMzQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsd0NBQW9CLENBQUMsaUNBQWlDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hGLHFDQUFpQixDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUV2QyxNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUN0QixHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsK0JBQStCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbkgsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDaEcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG58ICAkQ29weXJpZ2h0OiAoYykgMjAxNyBCZW50bGV5IFN5c3RlbXMsIEluY29ycG9yYXRlZC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gJFxyXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cclxuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgKiBhcyBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiO1xyXG5pbXBvcnQgeyBJTW9kZWxEYiB9IGZyb20gXCIkKGJhY2tlbmQpL2xpYi9iYWNrZW5kL0lNb2RlbERiXCI7XHJcbmltcG9ydCB7IElNb2RlbEdhdGV3YXkgfSBmcm9tIFwiJChiYWNrZW5kKS9saWIvZ2F0ZXdheS9JTW9kZWxHYXRld2F5XCI7XHJcbmltcG9ydCB7IEJlbnRsZXlDbG91ZEdhdGV3YXlDb25maWd1cmF0aW9uIH0gZnJvbSBcIiQoYmFja2VuZCkvbGliL2dhdGV3YXkvQmVudGxleUNsb3VkR2F0ZXdheUNvbmZpZ3VyYXRpb25cIjtcclxuaW1wb3J0IHsgTm9kZUFkZG9uUmVnaXN0cnksIE5vZGVBZGRvblBhY2thZ2VOYW1lIH0gZnJvbSBcIiQoYmFja2VuZCkvbGliL2JhY2tlbmQvTm9kZUFkZG9uUmVnaXN0cnlcIjtcclxuaW1wb3J0ICogYXMgdGVzdGJlZENvbmZpZyBmcm9tIFwiLi4vY29uZmlnXCI7XHJcblxyXG5JTW9kZWxEYjsgLy8gU2lnbmFsIHVzYWdlIG9mIElNb2RlbERiIHRvIHRzYyBpbXBvcnQgbG9naWNcclxuY29uc3QgZ2F0ZXdheXNDb25maWcgPSBCZW50bGV5Q2xvdWRHYXRld2F5Q29uZmlndXJhdGlvbi5pbml0aWFsaXplKHRlc3RiZWRDb25maWcuZ2F0ZXdheVBhcmFtcywgW0lNb2RlbEdhdGV3YXldKTtcclxuXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby12YXItcmVxdWlyZXNcclxuY29uc3QgYWRkb24gPSByZXF1aXJlKE5vZGVBZGRvblBhY2thZ2VOYW1lLmNvbXB1dGVEZWZhdWx0SW1vZGVsTm9kZUFkZG9uTmFtZSgpKTtcclxuTm9kZUFkZG9uUmVnaXN0cnkucmVnaXN0ZXJBZGRvbihhZGRvbik7XHJcblxyXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XHJcbmFwcC51c2UoYm9keVBhcnNlci50ZXh0KCkpO1xyXG5hcHAuZ2V0KHRlc3RiZWRDb25maWcuc3dhZ2dlclVSSSwgKHJlcSwgcmVzKSA9PiBnYXRld2F5c0NvbmZpZy5wcm90b2NvbC5oYW5kbGVPcGVuQXBpRGVzY3JpcHRpb25SZXF1ZXN0KHJlcSwgcmVzKSk7XHJcbmFwcC5wb3N0KFwiKlwiLCBhc3luYyAocmVxLCByZXMpID0+IGdhdGV3YXlzQ29uZmlnLnByb3RvY29sLmhhbmRsZU9wZXJhdGlvblBvc3RSZXF1ZXN0KHJlcSwgcmVzKSk7XHJcbmFwcC5saXN0ZW4odGVzdGJlZENvbmZpZy5zZXJ2ZXJQb3J0KTtcclxuIl19