/*---------------------------------------------------------------------------------------------
|  $Copyright: (c) 2018 Bentley Systems, Incorporated. All rights reserved. $
 *--------------------------------------------------------------------------------------------*/
import { expect} from "chai";
import { TileIO, IModelTileIO } from "@bentley/imodeljs-frontend/lib/tile";
import { ModelState } from "@bentley/imodeljs-frontend";
import { RenderSystem, Mesh, DisplayParams } from "@bentley/imodeljs-frontend/lib/rendering";
import { LinePixels } from "@bentley/imodeljs-common";

// Binary data for a tile created for a model containing a single element: a green rectangle in the range [0, 0] to [5, 10]
const rectangleTileBytes = new Uint8Array([
  0x64, 0x67, 0x6e, 0x54, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xc7, 0x4b, 0x37, 0x89, 0x41, 0x00, 0x04, 0xc0, 0xc7,
  0x4b, 0x37, 0x89, 0x41, 0x00, 0x14, 0xc0, 0x00, 0x00, 0xbd, 0x9a, 0xf2, 0xd7, 0x5a, 0xbe, 0x39, 0xb4, 0xc8, 0x76, 0xbe, 0xff,
  0x03, 0x40, 0x39, 0xb4, 0xc8, 0x76, 0xbe, 0xff, 0x13, 0x40, 0x00, 0x00, 0xbd, 0x9a, 0xf2, 0xd7, 0x5a, 0xbe, 0x58, 0x09, 0x00,
  0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x54, 0x46, 0x02,
  0x00, 0x00, 0x00, 0xf2, 0x08, 0x00, 0x00, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x22, 0x61, 0x63, 0x63, 0x65,
  0x73, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x61, 0x63, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x30, 0x22,
  0x3a, 0x7b, 0x22, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x22, 0x3a, 0x22, 0x62, 0x76, 0x49, 0x6e, 0x64,
  0x69, 0x63, 0x65, 0x73, 0x30, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x30,
  0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x35, 0x31, 0x32, 0x33,
  0x2c, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x36, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x53, 0x43,
  0x41, 0x4c, 0x41, 0x52, 0x22, 0x7d, 0x2c, 0x22, 0x61, 0x63, 0x63, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x30, 0x22, 0x3a, 0x7b,
  0x22, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x22, 0x3a, 0x22, 0x62, 0x76, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
  0x6c, 0x30, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x63,
  0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x35, 0x31, 0x32, 0x31, 0x2c, 0x22, 0x63,
  0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x34, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x56, 0x45, 0x43, 0x32, 0x22,
  0x7d, 0x2c, 0x22, 0x61, 0x63, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x22, 0x3a, 0x7b, 0x22, 0x62, 0x75,
  0x66, 0x66, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x22, 0x3a, 0x22, 0x62, 0x76, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
  0x30, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x63, 0x6f,
  0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x35, 0x31, 0x32, 0x33, 0x2c, 0x22, 0x63, 0x6f,
  0x75, 0x6e, 0x74, 0x22, 0x3a, 0x34, 0x2c, 0x22, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x7b,
  0x22, 0x57, 0x45, 0x42, 0x33, 0x44, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72,
  0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x72, 0x69,
  0x78, 0x22, 0x3a, 0x5b, 0x37, 0x2e, 0x36, 0x33, 0x30, 0x36, 0x35, 0x35, 0x33, 0x37, 0x34, 0x39, 0x39, 0x30, 0x34, 0x36, 0x31,
  0x31, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30,
  0x2c, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x35, 0x32, 0x36, 0x31, 0x33, 0x31, 0x30, 0x37, 0x34, 0x39, 0x39, 0x38, 0x30, 0x39,
  0x32, 0x32, 0x2c, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x2c, 0x31, 0x2e,
  0x35, 0x32, 0x36, 0x31, 0x33, 0x31, 0x30, 0x37, 0x34, 0x39, 0x39, 0x38, 0x30, 0x39, 0x32, 0x38, 0x65, 0x2d, 0x30, 0x38, 0x2c,
  0x30, 0x2e, 0x30, 0x2c, 0x2d, 0x32, 0x2e, 0x35, 0x30, 0x30, 0x33, 0x37, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
  0x39, 0x36, 0x2c, 0x2d, 0x35, 0x2e, 0x30, 0x30, 0x30, 0x37, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,
  0x31, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x37, 0x35, 0x30, 0x2c, 0x31, 0x2e, 0x30, 0x5d, 0x2c,
  0x22, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x22, 0x3a, 0x5b, 0x32, 0x2e, 0x35, 0x30, 0x30, 0x33, 0x37,
  0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x36, 0x2c, 0x35, 0x2e, 0x30, 0x30, 0x30, 0x37, 0x34, 0x39, 0x39,
  0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x31, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x37, 0x35,
  0x30, 0x5d, 0x2c, 0x22, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x22, 0x3a, 0x5b, 0x2d, 0x32, 0x2e, 0x35,
  0x30, 0x30, 0x33, 0x37, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x36, 0x2c, 0x2d, 0x35, 0x2e, 0x30, 0x30,
  0x30, 0x37, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x31, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x30,
  0x35, 0x30, 0x30, 0x30, 0x37, 0x35, 0x30, 0x5d, 0x7d, 0x7d, 0x2c, 0x22, 0x6d, 0x61, 0x78, 0x22, 0x3a, 0x5b, 0x32, 0x2e, 0x35,
  0x30, 0x30, 0x33, 0x37, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x36, 0x2c, 0x35, 0x2e, 0x30, 0x30, 0x30,
  0x37, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x31, 0x2c, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x35, 0x30,
  0x30, 0x30, 0x37, 0x35, 0x30, 0x5d, 0x2c, 0x22, 0x6d, 0x69, 0x6e, 0x22, 0x3a, 0x5b, 0x2d, 0x32, 0x2e, 0x35, 0x30, 0x30, 0x33,
  0x37, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x36, 0x2c, 0x2d, 0x35, 0x2e, 0x30, 0x30, 0x30, 0x37, 0x34,
  0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x31, 0x2c, 0x2d, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x35, 0x30, 0x30,
  0x30, 0x37, 0x35, 0x30, 0x5d, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x56, 0x45, 0x43, 0x33, 0x22, 0x7d, 0x2c,
  0x22, 0x61, 0x63, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x64, 0x67, 0x65, 0x30, 0x22, 0x3a, 0x7b, 0x22, 0x62, 0x75, 0x66,
  0x66, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x22, 0x3a, 0x22, 0x62, 0x76, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x64, 0x67, 0x65,
  0x30, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x63, 0x6f,
  0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x35, 0x31, 0x32, 0x33, 0x2c, 0x22, 0x63, 0x6f,
  0x75, 0x6e, 0x74, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x50, 0x4c, 0x49, 0x4e, 0x45, 0x22,
  0x7d, 0x2c, 0x22, 0x61, 0x63, 0x63, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x73, 0x30, 0x22, 0x3a, 0x7b, 0x22, 0x62, 0x75,
  0x66, 0x66, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x22, 0x3a, 0x22, 0x62, 0x76, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x73,
  0x30, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x63, 0x6f,
  0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x35, 0x31, 0x32, 0x33, 0x2c, 0x22, 0x63, 0x6f,
  0x75, 0x6e, 0x74, 0x22, 0x3a, 0x38, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52,
  0x22, 0x7d, 0x7d, 0x2c, 0x22, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x62,
  0x76, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x30, 0x22, 0x3a, 0x7b, 0x22, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x3a,
  0x22, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x67, 0x6c, 0x54, 0x46, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4c, 0x65,
  0x6e, 0x67, 0x74, 0x68, 0x22, 0x3a, 0x31, 0x32, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
  0x3a, 0x33, 0x32, 0x2c, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x3a, 0x33, 0x34, 0x39, 0x36, 0x33, 0x7d, 0x2c, 0x22,
  0x62, 0x76, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x30, 0x22, 0x3a, 0x7b, 0x22, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x3a,
  0x22, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x67, 0x6c, 0x54, 0x46, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4c, 0x65,
  0x6e, 0x67, 0x74, 0x68, 0x22, 0x3a, 0x38, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a,
  0x32, 0x34, 0x2c, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x3a, 0x33, 0x34, 0x39, 0x36, 0x32, 0x7d, 0x2c, 0x22, 0x62,
  0x76, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x22, 0x3a, 0x7b, 0x22, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22,
  0x3a, 0x22, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x67, 0x6c, 0x54, 0x46, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4c,
  0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3a, 0x32, 0x34, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
  0x22, 0x3a, 0x30, 0x2c, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x3a, 0x33, 0x34, 0x39, 0x36, 0x32, 0x7d, 0x2c, 0x22,
  0x62, 0x76, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x64, 0x67, 0x65, 0x30, 0x22, 0x3a, 0x7b, 0x22, 0x62, 0x75, 0x66, 0x66, 0x65,
  0x72, 0x22, 0x3a, 0x22, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x67, 0x6c, 0x54, 0x46, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74,
  0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3a, 0x31, 0x38, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73,
  0x65, 0x74, 0x22, 0x3a, 0x36, 0x30, 0x7d, 0x2c, 0x22, 0x62, 0x76, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x73, 0x30, 0x22,
  0x3a, 0x7b, 0x22, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x3a, 0x22, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x67, 0x6c,
  0x54, 0x46, 0x22, 0x2c, 0x22, 0x62, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3a, 0x31, 0x36, 0x2c, 0x22,
  0x62, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3a, 0x34, 0x34, 0x2c, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65,
  0x74, 0x22, 0x3a, 0x33, 0x34, 0x39, 0x36, 0x33, 0x7d, 0x7d, 0x2c, 0x22, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
  0x73, 0x22, 0x3a, 0x7b, 0x22, 0x43, 0x45, 0x53, 0x49, 0x55, 0x4d, 0x5f, 0x52, 0x54, 0x43, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x65,
  0x6e, 0x74, 0x65, 0x72, 0x22, 0x3a, 0x5b, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x2c, 0x30, 0x2e, 0x30, 0x5d, 0x7d, 0x7d,
  0x2c, 0x22, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x64, 0x22, 0x3a, 0x5b, 0x22, 0x4b,
  0x48, 0x52, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x67, 0x6c, 0x54, 0x46, 0x22, 0x2c, 0x22, 0x43, 0x45, 0x53, 0x49,
  0x55, 0x4d, 0x5f, 0x52, 0x54, 0x43, 0x22, 0x2c, 0x22, 0x57, 0x45, 0x42, 0x33, 0x44, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
  0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x5d, 0x2c, 0x22, 0x67, 0x6c, 0x45,
  0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x64, 0x22, 0x3a, 0x5b, 0x22, 0x4f, 0x45, 0x53, 0x5f,
  0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x22, 0x5d, 0x2c,
  0x22, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
  0x6c, 0x30, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x3a, 0x32, 0x33, 0x2c,
  0x22, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
  0x3a, 0x36, 0x35, 0x32, 0x38, 0x30, 0x2c, 0x22, 0x66, 0x69, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x3a, 0x30, 0x2c,
  0x22, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73,
  0x65, 0x2c, 0x22, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x3a, 0x36, 0x35, 0x32, 0x38, 0x30, 0x2c, 0x22,
  0x6c, 0x69, 0x6e, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x69,
  0x64, 0x74, 0x68, 0x22, 0x3a, 0x31, 0x2c, 0x22, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
  0x22, 0x3a, 0x32, 0x34, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x30, 0x7d, 0x7d, 0x2c, 0x22, 0x6d, 0x65, 0x73, 0x68,
  0x65, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x4d, 0x65, 0x73, 0x68, 0x22, 0x3a, 0x7b, 0x22, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
  0x76, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3a, 0x7b,
  0x22, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x22, 0x3a, 0x22, 0x61, 0x63, 0x63, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x30, 0x22,
  0x2c, 0x22, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x22, 0x3a, 0x22, 0x61, 0x63, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74,
  0x69, 0x6f, 0x6e, 0x30, 0x22, 0x7d, 0x2c, 0x22, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x3a, 0x5b,
  0x36, 0x35, 0x32, 0x38, 0x30, 0x5d, 0x2c, 0x22, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x70, 0x6f, 0x6c, 0x79,
  0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x3a, 0x22, 0x61, 0x63, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x45, 0x64, 0x67, 0x65, 0x30,
  0x22, 0x2c, 0x22, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x3a, 0x22, 0x61, 0x63, 0x63, 0x76, 0x69, 0x73, 0x69,
  0x62, 0x6c, 0x65, 0x73, 0x30, 0x22, 0x7d, 0x2c, 0x22, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x22, 0x3a, 0x30,
  0x2c, 0x22, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0x3a, 0x22, 0x61, 0x63, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
  0x73, 0x30, 0x22, 0x2c, 0x22, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x61, 0x72, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22,
  0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x3a, 0x22, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x30, 0x22,
  0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x30, 0x7d, 0x5d, 0x7d, 0x7d, 0x2c, 0x22, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22,
  0x3a, 0x7b, 0x22, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x65, 0x73, 0x68, 0x65, 0x73,
  0x22, 0x3a, 0x5b, 0x22, 0x4d, 0x65, 0x73, 0x68, 0x22, 0x5d, 0x7d, 0x7d, 0x2c, 0x22, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x3a,
  0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x2c, 0x22, 0x73, 0x63, 0x65, 0x6e, 0x65,
  0x73, 0x22, 0x3a, 0x7b, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x3a, 0x7b, 0x22,
  0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x5d, 0x7d, 0x7d,
  0x7d, 0x0a, 0x03, 0x00, 0x03, 0x00, 0xfe, 0x7f, 0xf8, 0xff, 0x03, 0x00, 0xfe, 0x7f, 0xf8, 0xff, 0xf8, 0xff, 0xfe, 0x7f, 0x03,
  0x00, 0xf8, 0xff, 0xfe, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
  0x00, 0xf0, 0x41, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
]);

function delta(a: number, b: number): number { return Math.abs(a - b); }

describe("TileIO", () => {
  it("should read tile headers", () => {
    const stream = new TileIO.StreamBuffer(rectangleTileBytes.buffer);
    const tileHeader = new TileIO.Header(stream);
    expect(tileHeader.isValid).to.be.true;
    expect(tileHeader.format).to.equal(TileIO.Format.IModel);
    expect(tileHeader.version).to.equal(0);

    stream.reset();
    const header = new IModelTileIO.Header(stream);
    expect(header.isValid).to.be.true;
    expect(header.format).to.equal(TileIO.Format.IModel);
    expect(header.version).to.equal(0);
    expect(header.flags).to.equal(IModelTileIO.Flags.IsLeaf);
    expect(header.length).to.equal(2392);

    // content range is relative to tileset origin at (0, 0, 0)
    const low = header.contentRange.low;
    expect(delta(low.x, -2.5)).to.be.lessThan(0.0005);
    expect(delta(low.y, -5.0)).to.be.lessThan(0.0005);
    expect(delta(low.z, 0.0)).to.be.lessThan(0.0005);

    const high = header.contentRange.high;
    expect(delta(high.x, 2.5)).to.be.lessThan(0.0005);
    expect(delta(high.y, 5.0)).to.be.lessThan(0.0005);
    expect(delta(high.z, 0.0)).to.be.lessThan(0.0005);
  });

  it("should read an iModel tile", () => {
    // ###TODO: ModelState, RenderSystem...
    const model: ModelState | undefined = undefined;
    const system: RenderSystem | undefined = undefined;
    const stream = new TileIO.StreamBuffer(rectangleTileBytes.buffer);
    const reader = IModelTileIO.Reader.create(stream, model!, system!);
    expect(reader).not.to.be.undefined;

    if (undefined !== reader) {
      const result = reader.read();
      expect(result.readStatus).to.equal(TileIO.ReadStatus.Success);
      expect(result.isLeaf).to.be.true;
      expect(result.contentRange).not.to.be.undefined;
      expect(result.geometry).not.to.be.undefined;

      const low = result.contentRange!.low;
      expect(delta(low.x, -2.5)).to.be.lessThan(0.0005);
      expect(delta(low.y, -5.0)).to.be.lessThan(0.0005);
      expect(delta(low.z, 0.0)).to.be.lessThan(0.0005);

      const high = result.contentRange!.high;
      expect(delta(high.x, 2.5)).to.be.lessThan(0.0005);
      expect(delta(high.y, 5.0)).to.be.lessThan(0.0005);
      expect(delta(high.z, 0.0)).to.be.lessThan(0.0005);

      const geom = result.geometry!;
      expect(geom.isEmpty).to.be.false;
      expect(geom.isComplete).to.be.true;
      expect(geom.isCurved).to.be.false;

      const meshes = geom.meshes;
      expect(meshes.length).to.equal(1);

      const mesh = meshes[0];
      expect(mesh.type).to.equal(Mesh.PrimitiveType.Mesh);
      expect(mesh.points.length).to.equal(4);
      expect(mesh.isPlanar).to.be.true;
      expect(mesh.is2d).to.be.false;
      expect(mesh.colorMap.length).to.equal(1);
      expect(mesh.colorMap.isUniform).to.be.true;
      expect(mesh.colorMap.getIndex(0x0000ff00)).to.equal(0); // green is first and only color in color table
      expect(mesh.colors.length).to.equal(0);
      expect(mesh.features).not.to.be.undefined;
      expect(mesh.features!._indices.length).to.equal(0);
      // expect(mesh.features!.uniform).to.equal(???);

      const displayParams = mesh.displayParams;
      expect(displayParams.type).to.equal(DisplayParams.Type.Mesh);
      expect(displayParams.material).to.be.undefined;
      expect(displayParams.lineColor.tbgr).to.equal(0x0000ff00);
      expect(displayParams.fillColor.tbgr).to.equal(0x0000ff00);
      expect(displayParams.width).to.equal(1);
      expect(displayParams.linePixels).to.equal(LinePixels.Solid);
      expect(displayParams.ignoreLighting).to.be.false;

      expect(mesh.normals.length).to.equal(4);
      expect(mesh.uvParams.length).to.equal(0);
    }
  });
});
