/*---------------------------------------------------------------------------------------------
|  $Copyright: (c) 2017 Bentley Systems, Incorporated. All rights reserved. $
 *--------------------------------------------------------------------------------------------*/
"use strict";

// Do this as the first thing so that any code reading it knows the right env.
require("./utils/initialize")("development");

const fs = require("fs");
const chalk = require("chalk");
const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const clearConsole = require("react-dev-utils/clearConsole");
const checkRequiredFiles = require("react-dev-utils/checkRequiredFiles");
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require("react-dev-utils/WebpackDevServerUtils");
const paths = require("../config/paths");
const config = require("../config/webpack.config.frontend.dev");
const createDevServerConfig = require("../config/webpackDevServer.config");
const { handleInterrupts } = require("./utils/simpleSpawn");

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || "0.0.0.0";

let devServer = null;

module.exports = async () => {
  // We attempt to use the default port but if it is busy, we offer the user to
  // run on a different port. `detect()` Promise resolves to the next free port.
  const port = await choosePort(HOST, DEFAULT_PORT);

  if (port == null) {
    // We have not found a port.
    return;
  }

  const protocol = process.env.HTTPS === "true" ? "https" : "http";
  const appName = require(paths.appPackageJson).name;
  const urls = prepareUrls(protocol, HOST, port);

  // Create a webpack compiler that is configured with custom messages.
  const compiler = createCompiler(webpack, config, appName, urls, useYarn);

  // Load proxy config
  const proxySetting = require(paths.appPackageJson).proxy;
  const proxyConfig = prepareProxy(proxySetting, paths.appPublic);

  // Serve webpack assets generated by the compiler over a web sever.
  const serverConfig = createDevServerConfig(
    proxyConfig,
    urls.lanUrlForConfig
  );
  devServer = new WebpackDevServer(compiler, serverConfig);

  await new Promise((resolve) => {
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      console.log(chalk.cyan("Starting the development server..."));
      resolve(urls.localUrlForBrowser);
    });
  });
};
  
// This is required to correctly handle SIGINT on windows.
handleInterrupts(() => {
  if (devServer)
    devServer.close();

  process.exit();
});